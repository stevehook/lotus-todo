"use strict";angular.module("todoApp",["ngAnimate","ngCookies","ngResource","ngRoute","ngSanitize","ngTouch"]).run(["$http",function(a){a.defaults.headers.common.Accept="application/json"}]).config(["$routeProvider",function(a){a.when("/login",{templateUrl:"views/login.html",controller:"LoginCtrl"}).when("/",{templateUrl:"views/main.html",controller:"MainCtrl",resolve:{load:["AuthenticationService",function(a){return a.verifyLoggedIn()}]}}).when("/archive",{templateUrl:"views/archive.html",controller:"ArchiveCtrl",resolve:{load:["AuthenticationService",function(a){return a.verifyLoggedIn()}]}}).when("/about",{templateUrl:"views/about.html",controller:"AboutCtrl",resolve:{load:["AuthenticationService",function(a){return a.verifyLoggedIn()}]}}).otherwise({redirectTo:"/"})}]).factory("errorHttpInterceptor",["$q","$location",function(a,b){return{responseError:function(c){return 401===c.status?(b.path("/login"),a.reject(c)):a.reject(c)}}}]).config(["$httpProvider",function(a){a.interceptors.push("errorHttpInterceptor")}]),angular.module("todoApp").service("AuthenticationService",["$http","$q",function(a,b){var c=this;this.loggedIn=!1,this.isLoggedIn=function(){return this.loggedIn},this.login=function(b){return a.post("/api/sessions",b).then(function(a){return c.loggedIn=!0,a.data})},this.logout=function(){return a.delete("/api/sessions").then(function(a){return c.loggedIn=!1,a.data})},this.verifyLoggedIn=function(){var c=b.defer(),d=this;return this.loggedIn?c.resolve(!0):a({url:"/api/sessions",method:"GET"}).success(function(a){d.loggedIn=a.loggedIn,c.resolve(!0)}),c.promise}}]),angular.module("todoApp").controller("NavBarCtrl",["$rootScope","$scope","$location","AUTH_EVENTS","AuthenticationService",function(a,b,c,d,e){b.isLoggedIn=function(){return e.isLoggedIn()},b.routeIs=function(a){return c.path()===a},b.logout=function(){e.logout().then(function(){a.$broadcast("auth",d.logoutSuccess),c.path("/login")},function(){a.$broadcast("auth",d.logoutFailed)})}}]),angular.module("todoApp").constant("AUTH_MESSAGES",{"login-success":{text:"Login succeeded",type:"info"},"login-failed":{text:"Login failed",type:"danger"},"logout-success":{text:"Logout succeeded",type:"info"},"logout-failed":{text:"Logout failed",type:"danger"}}).constant("TASK_MESSAGES",{"create-success":{text:"New task created",type:"info"},"create-failed":{text:"Could not create new task",type:"danger"},"complete-success":{text:"Task completed",type:"info"},"complete-failed":{text:"Could not complete task",type:"danger"},"delete-success":{text:"Task deleted",type:"info"},"delete-failed":{text:"Could not delete task",type:"danger"}}).controller("NotificationCtrl",["$rootScope","$scope","AUTH_MESSAGES","TASK_MESSAGES",function(a,b,c,d){b.show=!1,b.text="",b.type="",a.$on("auth",function(a,d){var e=c[d];e&&b.setNotification(e.text,e.type)}),a.$on("task",function(a,c){var e=d[c];e&&b.setNotification(e.text,e.type)}),b.setNotification=function(a,c){b.text=a,b.type=c,b.show=!0},b.resetNotification=function(){b.show=!1,b.text="",b.type=""},b.showNotification=function(){return b.show},b.notificationType=function(){return b.type},b.notificationText=function(){return b.text}}]),angular.module("todoApp").constant("TASK_EVENTS",{taskCompleteSuccess:"complete-success",taskCompleteFailed:"complete-failed",taskCreateSuccess:"create-success",taskCreateFailed:"create-failed",taskDeleteSuccess:"delete-success",taskDeleteFailed:"delete-failed"}).controller("MainCtrl",["$rootScope","$scope","$http","TASK_EVENTS",function(a,b,c,d){b.tasks=[],c.get("/api/tasks").success(function(a){b.tasks=a,b.newTask={}}),b.completeTask=function(b){b.completed||c.post("/api/tasks/"+b.id+"/complete",b,{headers:{"X-Http-Method-Override":"PATCH"}}).success(function(){b.completed=!0,a.$broadcast("task",d.taskCompleteSuccess)}).error(function(){a.$broadcast("task",d.taskCompleteFailed)})},b.deleteTask=function(e){c.delete("/api/tasks/"+e.id,e,{}).success(function(){b.tasks.splice(b.tasks.indexOf(e),1),a.$broadcast("task",d.taskDeleteSuccess)}).error(function(){a.$broadcast("task",d.taskDeleteFailed)})},b.createTask=function(){b.isValid(b.newTask)&&c.post("/api/tasks",{task:b.newTask},{headers:{"X-Http-Method-Override":"PATCH"}}).success(function(c){b.tasks.push(c),b.newTask={},a.$broadcast("task",d.taskCreateSuccess)}).error(function(){a.$broadcast("task",d.taskCreateFailed)})},b.isValid=function(a){return a.title&&""!==a.title}}]),angular.module("todoApp").controller("ArchiveCtrl",["$scope","$http",function(a,b){a.tasks=[],b.get("/api/tasks/archive").success(function(b){a.tasks=b})}]),angular.module("todoApp").controller("AboutCtrl",["$scope",function(a){a.awesomeThings=["HTML5 Boilerplate","AngularJS","Karma"]}]),angular.module("todoApp").constant("AUTH_EVENTS",{loginSuccess:"login-success",loginFailed:"login-failed",logoutSuccess:"logout-success",logoutFailed:"logout-failed"}).controller("LoginCtrl",["$scope","$rootScope","$location","AUTH_EVENTS","AuthenticationService",function(a,b,c,d,e){a.credentials={email:""},a.isLoggedIn=function(){return e.isLoggedIn()},a.login=function(f){e.login({credentials:f}).then(function(e){b.$broadcast("auth",d.loginSuccess),a.currentUser=e,c.path("/")},function(){b.$broadcast("auth",d.loginFailed)})}}]);